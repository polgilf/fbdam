# constraints_v1.0.yaml
# Catalog of constraint templates for FBDAM v1.0
# ---------------------------------------------------------
# - Define reusable constraint blocks by ID
# - Each block has: id, type (handler in code), params
# - Referenced from scenarios via: constraints: [{ref: <id>}]
# - Params can be overridden with "override" in the scenario
# ---------------------------------------------------------

version: v1.0
status: validated
maintainer: pol_gil

constraints:
  - id: util_link
    type: u_link
    description: >
      Links utility with quantity and requirement:
      u[n,h] <= q[n,h] / R[h,n]
    params: {}
  - id: stock_balance
    type: stock_balance
    description: >
      Balances inventory: the sum of allocations per item cannot exceed
      donated availability plus purchases (S_i + y_i).
    params: {}
  - id: purchase_budget
    type: purchase_budget
    description: >
      Limits total spending on purchases according to the scenario budget or
      the 'budget' parameter provided in the block.
    params: {}
  - id: fairshare_cap_house
    type: fairshare_cap_house
    description: >
      Limits absolute deviation from a proportional allocation
      based on each household's fairshare_weight (uses alpha dial).
    params:
      alpha: 0.7
  - id: deviation_identity
    type: deviation_identity
    description: >
      Decomposes absolute deviation from fair-share w_h·(S_i + y_i)
      using delta^+ and delta^- variables.
    params: {}
  - id: deviation_item_cap
    type: deviation_item_cap
    description: >
      Aggregate L1 cap per item using alpha_i dial: sum_h (delta^+ + delta^-)
      <= alpha_i · (S_i + y_i).
    params: {}
  - id: deviation_household_cap
    type: deviation_household_cap
    description: >
      Aggregate L1 cap per household using beta_h dial: sum_i (delta^+ + delta^-)
      <= beta_h · TotSupply.
    params: {}
  - id: deviation_pair_cap
    type: deviation_pair_cap
    description: >
      L1 cap per pair (i,h) using rho_{i,h} dial: delta^+ + delta^- <= rho_{i,h}·(S_i + y_i).
    params: {}
  - id: household_floor
    type: household_floor
    description: >
      Imposes aggregate floor per household: \bar{u}_h - omega_h·\bar{u}_{all} >= -epsilon.
      The omega dial can be scalar or per household; use_slack controls epsilon usage.
    params:
      use_slack: auto
  - id: nutrient_floor
    type: nutrient_floor
    description: >
      Imposes aggregate floor per nutrient: \bar{u}_n - gamma_n·\bar{u}_{all} >= -epsilon.
    params:
      use_slack: auto
  - id: pair_floor
    type: pair_floor
    description: >
      Imposes floor per nutrient-household pair: u[n,h] - kappa_{n,h}·\bar{u}_{all} >= -epsilon.
    params:
      use_slack: auto